import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Play, Download, Share, Image, Code, Eye, Gamepad2 } from "lucide-react";
import { useGame } from "@/contexts/GameContext";

export function GamePanel() {
  const { gameState } = useGame();
  const [activeTab, setActiveTab] = useState("preview");

  // Empty state when no game is generated yet
  const emptyState = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Card Game</title>
    <style>
        body {
            font-family: 'Rajdhani', sans-serif;
            background: linear-gradient(135deg, #0f172a, #1e293b);
            color: #e2e8f0;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .game-container {
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }
        
        .game-title {
            font-size: 2.5rem;
            color: #00ffff;
            text-shadow: 0 0 20px #00ffff;
            margin-bottom: 30px;
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin: 30px 0;
        }
        
        .card {
            aspect-ratio: 1;
            background: linear-gradient(135deg, #1e293b, #334155);
            border: 2px solid #00ffff;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px #00ffff;
        }
        
        .card.flipped {
            background: linear-gradient(135deg, #8b5cf6, #a855f7);
            border-color: #8b5cf6;
        }
        
        .card.matched {
            background: linear-gradient(135deg, #10b981, #059669);
            border-color: #10b981;
        }
        
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
        }
        
        .stat {
            text-align: center;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #00ffff;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #64748b;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">MEMORY MATRIX</h1>
        
        <div class="stats">
            <div class="stat">
                <div class="stat-value" id="moves">0</div>
                <div class="stat-label">MOVES</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="matches">0</div>
                <div class="stat-label">MATCHES</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="timer">00:00</div>
                <div class="stat-label">TIME</div>
            </div>
        </div>
        
        <div class="game-board" id="gameBoard">
            <!-- Cards will be generated by JavaScript -->
        </div>
        
        <button onclick="resetGame()" style="
            background: linear-gradient(135deg, #00ffff, #8b5cf6);
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            color: #0f172a;
            font-weight: bold;
            font-size: 1.1rem;
            cursor: pointer;
            margin-top: 20px;
        ">RESET GAME</button>
    </div>
    
    <script>
        // Game logic will be implemented here
        const symbols = ['🎮', '🎯', '🎲', '🎪', '🎨', '🎭', '🎸', '🎬'];
        const cards = [...symbols, ...symbols];
        let flippedCards = [];
        let moves = 0;
        let matches = 0;
        let startTime = Date.now();
        
        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        function createBoard() {
            const gameBoard = document.getElementById('gameBoard');
            gameBoard.innerHTML = '';
            shuffle(cards);
            
            cards.forEach((symbol, index) => {
                const card = document.createElement('div');
                card.className = 'card';
                card.dataset.symbol = symbol;
                card.dataset.index = index;
                card.innerHTML = '?';
                card.addEventListener('click', flipCard);
                gameBoard.appendChild(card);
            });
        }
        
        function flipCard(e) {
            const card = e.target;
            if (card.classList.contains('flipped') || card.classList.contains('matched') || flippedCards.length === 2) {
                return;
            }
            
            card.classList.add('flipped');
            card.innerHTML = card.dataset.symbol;
            flippedCards.push(card);
            
            if (flippedCards.length === 2) {
                moves++;
                document.getElementById('moves').textContent = moves;
                checkMatch();
            }
        }
        
        function checkMatch() {
            const [card1, card2] = flippedCards;
            
            setTimeout(() => {
                if (card1.dataset.symbol === card2.dataset.symbol) {
                    card1.classList.add('matched');
                    card2.classList.add('matched');
                    matches++;
                    document.getElementById('matches').textContent = matches;
                    
                    if (matches === symbols.length) {
                        alert('Congratulations! You won!');
                    }
                } else {
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    card1.innerHTML = '?';
                    card2.innerHTML = '?';
                }
                flippedCards = [];
            }, 1000);
        }
        
        function resetGame() {
            moves = 0;
            matches = 0;
            flippedCards = [];
            startTime = Date.now();
            document.getElementById('moves').textContent = '0';
            document.getElementById('matches').textContent = '0';
            document.getElementById('timer').textContent = '00:00';
            createBoard();
        }
        
        // Timer
        setInterval(() => {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
            const seconds = (elapsed % 60).toString().padStart(2, '0');
            document.getElementById('timer').textContent = minutes + ':' + seconds;
        }, 1000);
        
        // Initialize game
        createBoard();
    </script>
</body>
</html>`;

  const sampleAssets = [
    { name: "game-icons.svg", type: "image", size: "24KB" },
    { name: "cyberpunk-bg.jpg", type: "image", size: "156KB" },
    { name: "neon-button.css", type: "style", size: "8KB" },
    { name: "sound-effects.mp3", type: "audio", size: "45KB" },
  ];

  return (
    <div className="h-full flex flex-col">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="grid w-full grid-cols-3 bg-muted/20 backdrop-blur">
          <TabsTrigger 
            value="preview" 
            className="data-[state=active]:bg-primary/20 data-[state=active]:text-primary data-[state=active]:shadow-[var(--shadow-neon)]"
          >
            <Eye className="w-4 h-4 mr-2" />
            Preview
          </TabsTrigger>
          <TabsTrigger 
            value="assets"
            className="data-[state=active]:bg-secondary/20 data-[state=active]:text-secondary data-[state=active]:shadow-[var(--shadow-purple)]"
          >
            <Image className="w-4 h-4 mr-2" />
            Assets
          </TabsTrigger>
          <TabsTrigger 
            value="code"
            className="data-[state=active]:bg-accent/20 data-[state=active]:text-accent data-[state=active]:shadow-[var(--shadow-pink)]"
          >
            <Code className="w-4 h-4 mr-2" />
            Code
          </TabsTrigger>
        </TabsList>

        <TabsContent value="preview" className="flex-1 p-4">
          <Card className="h-full bg-background/50 border-primary/30 backdrop-blur cyber-grid">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-primary font-orbitron">Game Preview</CardTitle>
                <div className="flex space-x-2">
                  <Button size="sm" variant="outline" className="border-primary/30 hover:border-primary/50">
                    <Play className="w-4 h-4 mr-2" />
                    Run
                  </Button>
                  <Button size="sm" variant="outline" className="border-secondary/30 hover:border-secondary/50">
                    <Share className="w-4 h-4 mr-2" />
                    Share
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="h-[calc(100%-80px)]">
              <div className="w-full h-full bg-gradient-to-br from-background to-muted/20 rounded-lg border border-border/50 overflow-hidden">
                {gameState.isGenerating && gameState.operationType === 'game_creation' ? (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center space-y-4">
                      <div className="w-16 h-16 mx-auto bg-gradient-to-r from-primary/20 to-secondary/20 rounded-lg flex items-center justify-center">
                        <div className="w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
                      </div>
                      <div>
                        <h3 className="font-orbitron font-bold text-lg text-primary mb-2">
                          {gameState.status === 'thinking' ? 'Planning Your Game' : 'Generating Code'}
                        </h3>
                        <p className="text-sm text-muted-foreground max-w-xs">
                          Maya is creating your game. This may take a minute...
                        </p>
                      </div>
                    </div>
                  </div>
                ) : gameState.code?.html ? (
                  <iframe
                    srcDoc={(() => {
                      // Combine HTML, CSS, and JS into a complete document
                      const html = gameState.code.html;
                      const css = gameState.code.css || '';
                      const js = gameState.code.js || '';
                      
                      console.log('Preview HTML:', html?.slice(0, 100));
                      console.log('Preview CSS:', css?.slice(0, 100));  
                      console.log('Preview JS:', js?.slice(0, 100));
                      
                      // If HTML already contains <style> and <script> tags, use as-is
                      if (html.includes('<style>') && html.includes('<script>')) {
                        console.log('Using complete HTML as-is');
                        return html;
                      }
                      
                      // Otherwise, inject CSS and JS into the HTML
                      let completeHTML = html;
                      
                      // Add CSS if provided and not already present
                      if (css && !html.includes('<style>')) {
                        completeHTML = completeHTML.replace(
                          '</head>',
                          `<style>${css}</style></head>`
                        );
                        console.log('Added CSS to HTML');
                      }
                      
                      // Add JS if provided and not already present
                      if (js && !html.includes('<script>')) {
                        completeHTML = completeHTML.replace(
                          '</body>',
                          `<script>${js}</script></body>`
                        );
                        console.log('Added JS to HTML');
                      }
                      
                      console.log('Final HTML length:', completeHTML.length);
                      return completeHTML;
                    })()}
                    className="w-full h-full border-0"
                    title="Game Preview"
                    sandbox="allow-scripts allow-same-origin allow-forms allow-popups"
                    style={{ backgroundColor: '#0f172a' }}
                  />
                ) : gameState.status === 'error' ? (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center space-y-4">
                      <div className="w-16 h-16 mx-auto bg-gradient-to-r from-destructive/20 to-destructive/30 rounded-lg flex items-center justify-center">
                        <span className="text-2xl">❌</span>
                      </div>
                      <div>
                        <h3 className="font-orbitron font-bold text-lg text-destructive mb-2">
                          Generation Failed
                        </h3>
                        <p className="text-sm text-muted-foreground max-w-xs">
                          {gameState.error || 'Something went wrong. Please try again.'}
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center space-y-4">
                      <div className="w-16 h-16 mx-auto bg-gradient-to-r from-primary/20 to-secondary/20 rounded-lg flex items-center justify-center">
                        <Gamepad2 className="w-8 h-8 text-primary" />
                      </div>
                      <div>
                        <h3 className="font-orbitron font-bold text-lg text-primary mb-2">
                          Ready to Create
                        </h3>
                        <p className="text-sm text-muted-foreground max-w-xs">
                          Your game will appear here once Maya generates the code. 
                          Start by describing your game idea in the chat.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="assets" className="flex-1 p-4">
          <Card className="h-full bg-background/50 border-secondary/30 backdrop-blur">
            <CardHeader>
              <CardTitle className="text-secondary font-orbitron">Game Assets</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {sampleAssets.map((asset, index) => (
                <div
                  key={index}
                  className="flex items-center justify-between p-3 bg-muted/20 rounded-lg border border-secondary/20 hover:border-secondary/40 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 rounded-lg bg-secondary/20 flex items-center justify-center">
                      <Image className="w-4 h-4 text-secondary" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">{asset.name}</p>
                      <p className="text-xs text-muted-foreground">{asset.type} • {asset.size}</p>
                    </div>
                  </div>
                  <Button size="sm" variant="outline" className="border-secondary/30">
                    <Download className="w-3 h-3" />
                  </Button>
                </div>
              ))}
              
              <div className="mt-6 text-center">
                <Button 
                  className="bg-gradient-to-r from-secondary to-accent hover:from-secondary/80 hover:to-accent/80"
                >
                  <Image className="w-4 h-4 mr-2" />
                  Upload New Asset
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="code" className="flex-1 p-4">
          <Card className="h-full bg-background/50 border-accent/30 backdrop-blur">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-accent font-orbitron">Game Code</CardTitle>
                <div className="flex space-x-2">
                  <Button size="sm" variant="outline" className="border-accent/30 hover:border-accent/50">
                    <Download className="w-4 h-4 mr-2" />
                    Download
                  </Button>
                  <Button size="sm" variant="outline" className="border-accent/30 hover:border-accent/50">
                    <Share className="w-4 h-4 mr-2" />
                    Export
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="h-[calc(100%-80px)]">
              <div className="h-full bg-muted/10 rounded-lg border border-accent/20 relative">
                {gameState.codeStream.isStreaming && gameState.codeStream.content ? (
                  <div className="absolute inset-0 overflow-auto p-0">
                    <div className="p-4 space-y-2">
                      <div className="flex items-center gap-2 text-xs text-accent border-b border-accent/20 pb-2">
                        <div className="w-2 h-2 bg-accent rounded-full animate-pulse"></div>
                        <span className="font-medium">Streaming Code - {gameState.codeStream.currentType.toUpperCase()}</span>
                      </div>
                      <pre className="text-xs font-mono text-foreground/90 whitespace-pre-wrap">
                        <code>{gameState.codeStream.content}</code>
                      </pre>
                    </div>
                  </div>
                ) : (gameState.isGenerating && gameState.operationType === 'game_creation') ? (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center space-y-3">
                      <div className="w-12 h-12 mx-auto border-2 border-accent border-t-transparent rounded-full animate-spin"></div>
                      <div>
                        <h4 className="font-orbitron font-bold text-accent mb-1">
                          Generating Code
                        </h4>
                        <p className="text-xs text-muted-foreground">
                          Creating your game code...
                        </p>
                      </div>
                    </div>
                  </div>
                ) : gameState.code?.html ? (
                  <div className="absolute inset-0 overflow-auto p-0">
                    <pre className="p-4 m-0 text-xs font-mono text-foreground/90 whitespace-pre-wrap">
                    {(() => {
                      // Show the complete combined HTML code
                      const html = gameState.code.html;
                      const css = gameState.code.css || '';
                      const js = gameState.code.js || '';
                      
                      // If HTML already contains <style> and <script> tags, use as-is
                      if (html.includes('<style>') && html.includes('<script>')) {
                        return html;
                      }
                      
                      // Otherwise, combine for display
                      let completeHTML = html;
                      
                      if (css && !html.includes('<style>')) {
                        completeHTML = completeHTML.replace(
                          '</head>',
                          `<style>${css}</style></head>`
                        );
                      }
                      
                      if (js && !html.includes('<script>')) {
                        completeHTML = completeHTML.replace(
                          '</body>',
                          `<script>${js}</script></body>`
                        );
                      }
                      
                      return completeHTML;
                    })()}
                    </pre>
                  </div>
                ) : gameState.status === 'error' ? (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center space-y-3">
                      <span className="text-4xl">💥</span>
                      <div>
                        <h4 className="font-orbitron font-bold text-destructive mb-1">
                          Code Generation Failed
                        </h4>
                        <p className="text-xs text-muted-foreground">
                          {gameState.error || 'Unable to generate code'}
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center space-y-3">
                      <Code className="w-12 h-12 mx-auto text-accent/50" />
                      <div>
                        <h4 className="font-orbitron font-bold text-accent mb-1">
                          No Code Yet
                        </h4>
                        <p className="text-xs text-muted-foreground">
                          Game code will appear here after generation
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}